# scgi_local = /home/tonky/.rtorrent/socket
safe_sync = yes
on_finished = move_complete,"execute=mv,-u,$d.get_base_path=,~/downloads/complete/ ;d.set_directory=~/downloads/complete/"

schedule = throttle_1,01:00:00,24:00:00,upload_rate=0
schedule = throttle_2,08:00:00,24:00:00,upload_rate=70 

# Maximum and minimum number of peers to connect to per torrent.
min_peers = 20
max_peers = 40
# max_peers = 100

# max_open_files=160

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = 1
max_peers_seed = 10

# Maximum number of simultanious uploads per torrent.
max_uploads = 2

# Global upload and download rate in KiB. "0" for unlimited.
#download_rate = 0
upload_rate = 70

# Default directory to save the downloaded torrents.
directory = /home/tonky/downloads/

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session = /home/tonky/.rtorrent/session

# Watch a directory for new torrents, and stop those that have been
# deleted.
schedule = watch_directory,5,5,load_start=/home/tonky/downloads/*.torrent
#schedule = untied_directory,5,5,stop_untied=

# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,close_low_diskspace=100M

# Enable the default ratio group.
ratio.enable=

# Change the limits, the defaults should be sufficient.
ratio.min.set=100
ratio.max.set=300

# Changing the command triggered when the ratio is reached.
system.method.set = group.seeding.ratio.command, d.close=, d.erase=

# Set whetever the client should try to connect to UDP trackers.
use_udp_trackers = yes

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
#
dht = auto

# Enable peer exchange (for torrents not marked private)
peer_exchange = yes

#
# Do not modify the following parameters unless you know what you're doing.
#

# Hash read-ahead controls how many MB to request the kernel to read
# ahead. If the value is too low the disk may not be fully utilized,
# while if too high the kernel might not be able to keep the read
# pages in memory thus end up trashing.
#hash_read_ahead = 10

# Interval between attempts to check the hash, in milliseconds.
#hash_interval = 100

# Number of attempts to check the hash while using the mincore status,
# before forcing. Overworked systems might need lower values to get a
# decent hash checking rate.
#hash_max_tries = 10
